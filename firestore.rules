rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if true;  // Public profiles
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Videos collection
    match /videos/{videoId} {
      allow read: if true;  // Public videos
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Comments collection
    match /videos/{videoId}/comments/{commentId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Likes collection
    match /videos/{videoId}/likes/{userId} {
      allow read: if true;
      allow create, delete: if isAuthenticated() && userId == request.auth.uid;
      allow update: if false;  // Likes shouldn't be updated, only created/deleted
    }

    // Follows collection
    match /users/{userId}/followers/{followerId} {
      allow read: if true;
      allow write: if isAuthenticated() && followerId == request.auth.uid;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}